{"version":3,"sources":["nasa-logo.png","components/Modal.js","components/ImageDisplay.js","components/APOD.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","onClose","e","props","this","show","className","children","onClick","React","Component","ImageDisplay","showModal","setState","state","RegExp","test","info","imageSource","src","title","frameBorder","allowFullScreen","id","date","description","alt","href","hdSource","target","rel","APOD","images","length","loadMoreImages","bind","year","month","day","request","process","fetch","method","headers","Accept","then","response","json","data","url","o","hdurl","explanation","newArray","push","sort","a","b","catch","error","console","log","alert","d","Date","num","setDate","getDate","i","getFullYear","getMonth","addToList","map","App","NASALogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e67071dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nasa-logo.6099842f.png\";","/*\r\n * The modal to display more information for a given image/video such as the date it was posted to NASA, it's description, and a link to the high-resolution version\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nclass Modal extends React.Component {\r\n  onClose = (e) => {\r\n    this.props.onClose && this.props.onClose(e);\r\n  };\r\n\r\n  render() {\r\n    if (this.props.show) {\r\n      return (\r\n        <>\r\n          <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n              {this.props.children}\r\n              <button\r\n                onClick={(e) => this.onClose(e)}\r\n                className=\"modal-close-button\"\r\n              >\r\n                &times;\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return <></>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","/*\r\n  * Component to display an Image/Video from APOD\r\n  * When clicked, a modal will open with more information on the image\r\n  */\r\n\r\nimport React from \"react\";\r\nimport Modal from \"./Modal\";\r\n\r\nclass ImageDisplay extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show: false,\r\n    };\r\n  }\r\n\r\n  showModal = (e) => {\r\n    this.setState({\r\n      show: !this.state.show,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let youtubeRegex = new RegExp(/(www.youtube.com)/);\r\n    if (youtubeRegex.test(this.props.info.imageSource)) {\r\n      return (\r\n        <>\r\n          {/* The display of the video on the main page */}\r\n          <div className=\"video-display\">\r\n            <div className=\"video-container\">\r\n              <iframe\r\n                src={this.props.info.imageSource}\r\n                title={this.props.info.title}\r\n                frameBorder=\"0\"\r\n                className=\"apod-video\"\r\n                allowFullScreen=\"true\"\r\n              />\r\n              <button className=\"show-modal-button\" onClick={this.showModal}>\r\n                More Info\r\n              </button>\r\n            </div>\r\n\r\n            <Modal onClose={this.showModal} show={this.state.show}>\r\n              {/* Pass the format of the modal information as a child to the Modal component */}\r\n              <div className=\"modal-box\">\r\n                <iframe\r\n                  src={this.props.info.imageSource}\r\n                  title={this.props.info.title}\r\n                  frameBorder=\"0\"\r\n                  className=\"apod-video-modal\"\r\n                  allowFullScreen=\"true\"\r\n                />\r\n              </div>\r\n              <div className=\"modal-box\">\r\n                <div className=\"modal-information\">\r\n                  <p id=\"image-title\">{this.props.info.title}</p>\r\n                  <br />\r\n                  <p id=\"image-date\">{this.props.info.date}</p>\r\n                  <br />\r\n                  <p id=\"image-description\">{this.props.info.description}</p>\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          {/* The display of the image on the main page */}\r\n          <div className=\"image-display\">\r\n            <img\r\n              src={this.props.info.imageSource}\r\n              alt={this.props.info.title}\r\n              className=\"apod-image\"\r\n              onClick={this.showModal}\r\n            />\r\n            <Modal onClose={this.showModal} show={this.state.show}>\r\n              {/* Pass the format of the modal information as a child to the Modal component */}\r\n              <div className=\"modal-box\">\r\n                <img\r\n                  src={this.props.info.imageSource}\r\n                  alt={this.props.info.title}\r\n                  id=\"apod-hd-image\"\r\n                />\r\n              </div>\r\n              <div className=\"modal-box\">\r\n                <div className=\"modal-information\">\r\n                  <p id=\"image-title\">{this.props.info.title}</p>\r\n                  <br />\r\n                  <p id=\"image-date\">{this.props.info.date}</p>\r\n                  <br />\r\n                  <p id=\"image-description\">{this.props.info.description}</p>\r\n                  <br />\r\n                  <p id=\"image-open-hd\"><a id=\"image-open-hd-a\" href={this.props.info.hdSource} target=\"_blank\" rel=\"noopener noreferrer\">Open Full Size Image</a></p>\r\n                </div>\r\n              </div>\r\n            </Modal>\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default ImageDisplay;\r\n","/*\r\n * The parent component to all images/videos from NASA's APOD. This component makes the calls to the API to get information for each image/video.\r\n */\r\n\r\nimport React from \"react\";\r\nimport ImageDisplay from \"./ImageDisplay\";\r\n\r\nconst NUM_OF_IMAGES = 18;\r\n\r\nclass APOD extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      images: [],\r\n      length: 0,\r\n    };\r\n\r\n    this.loadMoreImages = this.loadMoreImages.bind(this);\r\n  }\r\n\r\n  /*\r\n   * Make an API call to NASA to fetch the picture for the given date and add it to the list of images\r\n   */\r\n  addToList(year, month, day) {\r\n    let request = `https://api.nasa.gov/planetary/apod?date=${year}-${month}-${day}&api_key=${process.env.REACT_APP_NASA_API_KEY}`;\r\n    fetch(request, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.url != null) {\r\n          let o = {\r\n            imageSource: data.url,\r\n            hdSource: data.hdurl,\r\n            description: data.explanation,\r\n            title: data.title,\r\n            date: data.date,\r\n          };\r\n\r\n          let newArray = this.state.images;\r\n          newArray.push(o);\r\n\r\n          newArray.sort((a, b) => (a.date < b.date ? 1 : -1));\r\n\r\n          this.setState({ images: newArray, length: newArray.length });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        alert(\"Server Timeout\");\r\n      });\r\n  }\r\n\r\n  /*\r\n   * Called when user requests more images, add NUM_OF_IMAGES more images to the array\r\n   */\r\n  loadMoreImages() {\r\n    if (process.env.REACT_APP_NASA_API_KEY == null) {\r\n      alert(\"No NASA API key found\");\r\n    } else {\r\n      let d = new Date();\r\n\r\n      let num = this.state.length;\r\n\r\n      d.setDate(d.getDate() - num);\r\n\r\n      for (let i = 0; i < NUM_OF_IMAGES; i++) {\r\n        let year = d.getFullYear();\r\n        let month = d.getMonth() + 1;\r\n        let day = d.getDate();\r\n\r\n        this.addToList(year, month, day);\r\n\r\n        d.setDate(d.getDate() - 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   * When the website opens, make NUM_OF_IMAGES calls to the API to fetch that many number of images to display\r\n   */\r\n  componentDidMount() {\r\n    if (process.env.REACT_APP_NASA_API_KEY == null) {\r\n      alert(\"No NASA API key found\");\r\n    } else {\r\n      let d = new Date();\r\n\r\n      for (let i = 0; i < NUM_OF_IMAGES; i++) {\r\n        let year = d.getFullYear();\r\n        let month = d.getMonth() + 1;\r\n        let day = d.getDate();\r\n\r\n        this.addToList(year, month, day);\r\n\r\n        d.setDate(d.getDate() - 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          {this.state.images.map((i) => (\r\n            <ImageDisplay info={i} />\r\n          ))}\r\n        </div>\r\n        <button className=\"extend-button\" onClick={this.loadMoreImages}>\r\n          More Images\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default APOD;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport NASALogo from \"./nasa-logo.png\";\nimport APOD from \"./components/APOD\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <img src={NASALogo} className=\"logo\" alt=\"NASA Logo\" />\n        <span className=\"title\">Astronomy Pictures of the Day</span>\n      </div>\n      <div className=\"content\">\n        <APOD />\n      </div>\n      <div className=\"footer\">\n        Website made by Tyler Ruth{\" \"}\n        <a className=\"github-link\" href=\"https://github.com/tjruth99\">\n          (@tjruth99)\n        </a>{\" \"}\n        and is not affiliated with NASA\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}